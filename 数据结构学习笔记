1.哈希：
哈希算法：将任意长度的二进制值串映射为固定长度的二进制值串
哈希值：通过原始数据映射之后得到的二进制值串就是哈希值
特点：①单向 ②敏感，改一个结果也不同 ③冲突小（无法零冲突） ④高效 ⑤很难反向推导
应用场景： ①安全加密，例如MD5，SHA，相同字符串二次加密后得到密文相同；
		 ②唯一标识，例如图库中寻找一张图片是否存在，截取前中后各100字节通过哈希算法，得到哈希值
		 ③数据校验，例如bt下载，文件可能被分成多块，下载后再组装，防止被恶意篡改，对分块取哈希，下载后再校验哈希值
		 ④散列函数：用于将元素散列分布，不关注是否能反向解密和个别冲突，只要分布平均，以及性能快慢
		（开放寻址法：当哈希冲突时，用某种策略例如线性探查二次探查，找下一个空的哈希槽存放元素）
		⑤负载均衡，会话粘滞（让同一个客户端的所有请求都去到一个服务器），采用映射表则浪费空间，而且维护成本高。
		方案：用客户端ip和会话id计算哈希值，再将哈希值与服务器列表取模运算，得到某个固定编号，根据这个编号作为找对应服务器
		⑥ 数据分片，例子1：统计关键词出现次数，在1T的日志文件里，快速统计关键词被搜索的次数。
				方案：数据分片，多台机器处理。将搜索关键词计算出哈希值，再对n取模，得到的编号为机器编号，哈希值相同的就被分配到同一台服务器上
			例子2：快速判断图片是否在图库中
				方案：数据分片+多机处理。图片计算哈希值，再与n台机器求余取模，得到的值就是机器编号，将图片唯一标识和图片路径放在这台机器的散列表里
					查找时同理，计算这张图片的唯一标识，再求余取模，得到机器编号，去该机器里找
		⑦ 分布式存储：原本根据机器取模的逻辑，当数据变多，需要扩容增加机器时，原本的就需要全部重算哈希值再搬到新机器上
		方案：一致性哈希算法，将服务器节点和数据项都映射到一个圆环上，每个服务器对应圆环上一段区间
		数据存放在第一个大于或等于该哈希值的服务器节点上，当有新增服务器或者减少时，就重新分配服务器节点上的数据项，减少全量重新计算的成本
		
