1.哈希：
哈希算法：将任意长度的二进制值串映射为固定长度的二进制值串
哈希值：通过原始数据映射之后得到的二进制值串就是哈希值
特点：①单向 ②敏感，改一个结果也不同 ③冲突小（无法零冲突） ④高效 ⑤很难反向推导
应用场景： ①安全加密，例如MD5，SHA，相同字符串二次加密后得到密文相同；
		 ②唯一标识，例如图库中寻找一张图片是否存在，截取前中后各100字节通过哈希算法，得到哈希值
		 ③数据校验，例如bt下载，文件可能被分成多块，下载后再组装，防止被恶意篡改，对分块取哈希，下载后再校验哈希值
		 ④散列函数：用于将元素散列分布，不关注是否能反向解密和个别冲突，只要分布平均，以及性能快慢
		（开放寻址法：当哈希冲突时，用某种策略例如线性探查二次探查，找下一个空的哈希槽存放元素）
		⑤负载均衡，会话粘滞（让同一个客户端的所有请求都去到一个服务器），采用映射表则浪费空间，而且维护成本高。
		方案：用客户端ip和会话id计算哈希值，再将哈希值与服务器列表取模运算，得到某个固定编号，根据这个编号作为找对应服务器
		⑥ 数据分片，例子1：统计关键词出现次数，在1T的日志文件里，快速统计关键词被搜索的次数。
				方案：数据分片，多台机器处理。将搜索关键词计算出哈希值，再对n取模，得到的编号为机器编号，哈希值相同的就被分配到同一台服务器上
			例子2：快速判断图片是否在图库中
				方案：数据分片+多机处理。图片计算哈希值，再与n台机器求余取模，得到的值就是机器编号，将图片唯一标识和图片路径放在这台机器的散列表里
					查找时同理，计算这张图片的唯一标识，再求余取模，得到机器编号，去该机器里找
		⑦ 分布式存储：原本根据机器取模的逻辑，当数据变多，需要扩容增加机器时，原本的就需要全部重算哈希值再搬到新机器上
		方案：一致性哈希算法，将服务器节点和数据项都映射到一个圆环上，每个服务器对应圆环上一段区间
		数据存放在第一个大于或等于该哈希值的服务器节点上，当有新增服务器或者减少时，就重新分配服务器节点上的数据项，减少全量重新计算的成本
		
2.树：非线性表数据结构
   高度：从地平面往上
   深度：从水平面往下
   层：跟深度相同，但初始是1
 ①二叉树：每个节点最多只有两个节点，左节点和右节点。
   满二叉树：所有节点都在最下面一层，且都有左右节点
   完全二叉树：叶子节点都在最后两层，且最后一层靠左排列，而且除了最后一层，其他层的节点是满的。（最适合数组顺序存储，节省内存）
 ②遍历二叉树：（复杂度是O(n)）
   前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。
   中序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。
   后序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。
 ③二叉查找树（二叉搜索树）：比节点小的存左节点，比节点大的存右节点
   查：跟节点对比，比节点大往右节点找，反之亦然
   增：跟节点对比，比节点大则找右节点，若空则新增
   删：1）没有子节点，直接删；2）一个子节点，替换被删除的节点；3）两个子节点，将右子树中最小节点作为替换节点
 ④重复数据二叉树：（例如存放两个18）
	方案一：二叉树节点存储多个数据，用链表或者支持动态扩容的数组等数据结构
	方案二：遇到相同时，将其放入右子树，当做比节点大处理
	⑤二叉树相比散列表：1）散列无序，二叉树有序；
					 2）散列扩容消耗多，遇到散列冲突时性能不稳定；虽然是o(n)查找，但是加上哈希函数和哈希冲突，不一定比平衡二叉树快
					 3）散列表构造比二叉查找树复杂，考虑东西多，例如散列函数涉及、哈希冲突解决办法、扩容、缩容；二叉树只要考虑平衡，解决方案比较成熟、固定
